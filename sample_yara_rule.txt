/*
    IDE Extension Hunter - Sample YARA Rule for Malicious IDE Extensions
    
    This rule is designed to detect common patterns found in malicious
    VS Code and PyCharm extensions based on real-world research.
*/

rule Discord_Webhook_Exfiltration {
    meta:
        description = "Detects Discord webhook exfiltration in extension"
        author = "IDE Extension Hunter"
        severity = "critical"
        reference = "https://github.com/yourusername/ide-extension-hunter"
    
    strings:
        $webhook_url = /https?:\/\/(?:ptb\.|canary\.)?discord(?:app)?\.com\/api\/webhooks\/[0-9]+\/[A-Za-z0-9_-]+/ 
        $webhook_send1 = ".content" nocase
        $webhook_send2 = ".embeds" nocase
        $webhook_send3 = ".attachments" nocase
        $webhook_send4 = "new FormData" nocase
        $webhook_send5 = "fetch(" nocase
    
    condition:
        $webhook_url and any of ($webhook_send*)
}

rule Browser_Cookie_Theft {
    meta:
        description = "Detects browser cookie theft attempts"
        author = "IDE Extension Hunter"
        severity = "critical"
        reference = "https://github.com/yourusername/ide-extension-hunter"
    
    strings:
        $cookie_path1 = /[\"'].*Chrome.*User Data.*Cookies[\"']/ nocase
        $cookie_path2 = /[\"'].*Firefox.*cookies.sqlite[\"']/ nocase
        $cookie_path3 = "document.cookie" nocase
        $sqlite_access = "sqlite3" nocase
        $file_access1 = "fs.readFile" nocase
        $file_access2 = "fopen" nocase

    condition:
        ($cookie_path1 or $cookie_path2 or $cookie_path3) and
        ($sqlite_access or $file_access1 or $file_access2)
}

rule Base64_Decoded_Execution {
    meta:
        description = "Detects base64 encoded payloads that are executed"
        author = "IDE Extension Hunter"
        severity = "high"
        reference = "https://github.com/yourusername/ide-extension-hunter"
    
    strings:
        $atob_eval = /atob\s*\([^)]+\)\s*\)?\s*(?:eval|exec|new\s+Function)/ nocase
        $btoa_fetch = /(?:btoa|atob)\s*\(\s*(?:fetch|require|exec|eval)/ nocase
        $buffer_from = /Buffer\.from\s*\([^,]+,\s*['"]base64['"]\)/ nocase
        $large_b64 = /["'`](?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?["'`]\s*[,);\s]*\s*(?:eval|exec|new Function)/ nocase
    
    condition:
        any of them
}

rule Solidity_Crypto_Targeting {
    meta:
        description = "Detects extensions targeting crypto users with Solidity/Ethereum support"
        author = "IDE Extension Hunter"
        severity = "medium"
        reference = "https://github.com/yourusername/ide-extension-hunter"
    
    strings:
        $blockchain1 = "ethereum" nocase
        $blockchain2 = "solidity" nocase
        $blockchain3 = /blockchain|web3|evm/ nocase
        $blockchain4 = "contract.handler" nocase
        $network_call = /fetch\s*\(|xhr\.|new XMLHttpRequest/
        $suspicious_domain = /\.ru\/|\.cn\/|\.io\/api\//

    condition:
        (any of ($blockchain*)) and ($network_call or $suspicious_domain)
}

rule Extension_Drop_Second_Stage {
    meta:
        description = "Detects extensions that download and execute second-stage payloads"
        author = "IDE Extension Hunter"
        severity = "critical"
        reference = "https://github.com/yourusername/ide-extension-hunter"
    
    strings:
        $download1 = "require('https')" nocase
        $download2 = "require('http')" nocase
        $download3 = "fetch(" nocase
        $download4 = "XMLHttpRequest" nocase
        $download5 = "axios." nocase
        $execute1 = "eval(" nocase
        $execute2 = "Function(" nocase
        $execute3 = "require('" nocase
        $execute4 = "execSync" nocase
        $execute5 = "spawn(" nocase
        $execute6 = ".exec(" nocase
    
    condition:
        any of ($download*) and any of ($execute*)
}
